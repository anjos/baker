#!/usr/bin/env python
# vim: set fileencoding=utf-8 :

"""Backs-up local folders on BackBlaze B2

Usage: %(prog)s [-v...] [options] <config> [<config> ...]
       %(prog)s --help
       %(prog)s --version


Arguments:

  <config>  A double composed of a local directory and a repository, separated
            by a pipe '|' symbol. Example "/data|b2:data". This double
            indicates that the local directory "/data" will be backed-up on the
            BackBlaze B2 bucket called "data".


Options:
  -h, --help                   Shows this help message and exits
  -V, --version                Prints the version and exits
  -v, --verbose                Increases the output verbosity level. May be
                               used multiple times
  -p, --password=<pwd>         Restic repository password
  -b, --b2-account-id=<id>     The BackBlaze B2 account identifier. Must be
                               set if ``config`` uses a BackBlaze bucket as
                               repository
  -B, --b2-account-key=<key>   The BackBlaze B2 key to use to run the backup.
                               This key must have access to the specified
                               bucket. Must be set if ``config`` uses a
                               BackBlaze bucket as repository
  -H, --hostname=<name>        Use this name as hostname instead of the
                               environment's [default: %(hostname)s]
  -k, --keep=<kept>            A 6-tuple with integer values separated by a
                               pipe '|' symbol which indicate the number of
                               snapshots to keep for 'last', 'hourly', 'daily',
                               'weekly', 'monthly' and 'yearly' clean-ups. A
                               value of zero disables that option. Notice we
                               always prune the restic repository
                               [default: 0|0|7|9|13|3]
  -d, --run-daily-at=<hour>    Runs the back-up job daily at the specified
                               time [default: 1:00]
  -m, --run-every=<min>        Runs the back-up job every delta minutes. A
                               value of zero disables it. This flag is useful
                               for testing the backup program. Notes this
                               disables running at daily intervals [default: 0]
  -e, --email                  If set, e-mail agents responsible every time
                               action occurs
  -S, --email-server=<host>    Name of the SMTP server to use for sending the
                               message [default: smtp.gmail.com]
  -P, --email-port=<port>      Port to use on the server [default: 587]
  -r, --email-receiver=<name>  Name/e-mail of the person that will receive
                               messages generated by this application
  -u, --email-username=<name>  Username for the SMTP authentication and to be
                               used as the sender of e-mail messages
  -w, --email-password=<pwd>   Password for the SMTP authentication


Examples:

  1. Runs the program and e-mails when done:

     $ %(prog)s -vv --email --username=me@gmail.com --password=secret

"""


import os
import sys
import time
import schedule


def main(user_input=None):

  if user_input is not None:
    argv = user_input
  else:
    argv = sys.argv[1:]

  import docopt
  import socket
  import pkg_resources

  completions = dict(
      prog=os.path.basename(sys.argv[0]),
      version=pkg_resources.require('baker')[0].version,
      hostname=socket.gethostname(),
      )

  args = docopt.docopt(
      __doc__ % completions,
      argv=argv,
      version=completions['version'],
      )

  from .reporter import setup_logger
  logger = setup_logger('baker', args['--verbose'])

  # do some commandline parsing
  directories, repositories = zip(*[k.split('|') for k in args['<config>']])
  keep_keys = ['last', 'hourly', 'daily', 'weekly', 'monthly', 'yearly']
  keep = dict(zip(keep_keys, [int(k) for k in args['--keep'].split('|')]))
  args['--run-every'] = int(args['--run-every'])

  # check some variables
  for dire, repo in zip(directories, repositories):
    if repo.startswith('b2:') and \
        (not args['--b2-account-id'] or not args['--b2-account-key']):
      raise RuntimeError('Specify --b2-account-id/key for repository `%s\'' % \
          repo)
    assert os.path.exists(dire)

  # log
  logger.info("Baker version %s (running on %s)",
      (completions['version'], args['--hostname']))
  for dire, repo in zip(directories, repositories):
    logger.info(" - (folder) %s -> %s (repo)", dire, repo)
  if args['--run-every']:
    logger.info("Running every %d minutes", args['--run-every'])
  else:
    logger.info("Running daily at %s", args['--run-daily'])

  logger.info("Snapshot storage strategy (--keep flags):")
  for key, value in keep:
    logger.info(' - %s: %d', key.capitalize(), value)

  if args['--email']:
    logger.info("Sending **real** e-mails")
  else:
    logger.info("Only logging e-mails, **not** sending anything")

  def job():
    '''The job that gets scheduled'''
    from .restic import backup, forget, check
    from .report import LoggingSaver

    overall_result = True

    with LoggingSaver(logger) as saver:

      for dire, repo in zip(directories, repositories):

        overall_result &= backup(
            directory=dire,
            repository=repo,
            global_options=[],
            hostname=args['--hostname'],
            backup_options=[],
            password=args['--password'],
            b2_account_id=args['--b2-account-id'],
            b2_account_key=args['--b2-account-key'],
            )
        if not overall_result: break

        overall_result &= forget(
            repository=repo,
            global_options=[],
            hostname=args['--hostname'],
            prune=True,
            keep=keep,
            password=args['--password'],
            b2_account_id=args['--b2-account-id'],
            b2_account_key=args['--b2-account-key'],
            )
        if not overall_result: break

        overall_result &= check(
            repository=repo,
            global_options=[],
            password=args['--password'],
            b2_account_id=args['--b2-account-id'],
            b2_account_key=args['--b2-account-key'],
            )
        if not overall_result: break

      if not overall_result: # there was a problem, report back
        pass

  try:
    while True:
      time.sleep(check_point)
      the_sorter.check_point()
  except KeyboardInterrupt:
    the_sorter.stop()
  the_sorter.join()
